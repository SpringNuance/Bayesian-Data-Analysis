"
data {
int<lower=0> N; // number of data points
vector[N] x; // observation year
vector[N] y; // observation number of drowned
real xpred; // prediction year
}
parameters {
real alpha;
real beta;
real<lower=0> sigma; // <- MISTAKE 1 fixed
}
transformed parameters {
vector[N] mu = alpha + beta*x;
real mu_pred = alpha + beta * xpred;
}
model {
beta ~ normal(0, 26.787); // Added this line in the block model code
y ~ normal(mu, sigma);
}
generated quantities {
real ypred = normal_rng(mu_pred, sigma);
}
"
find_sigma_alpha <- function(sigmaSeq) {
alpha_quantile_value = 138
alpha_quantile = 0.05
minError = 1e9
for (sigma in sigmaSeq){
newError = abs(qnorm(p = alpha_quantile, mean = 152, sd = sigma) - (alpha_quantile_value))
if (newError < minError){
sigmaMin = sigma
minError = newError
}
}
sigmaMin
}
sigma <- find_sigma_alpha(seq(0,100, length.out = 100000))
print("The optimal alpha sigma is: ")
print(sigma)
drowning
# Run MCMC using the 'sample' method
N = length(drowning) # The number of years
x = drowning$year  # The years (x-axis)
y = drowning$y # The number of drownings (y-axis)
xpred = 2020
drowning_data <- list(N=N, x=x, y=y, xpred=xpred)
iter_warmup <- 2000 # Number of warm up iterations
iter_sampling <- 2000 # Number of sampling iterations
chains <- 4 # Number of MCMC
fit_mcmc <- model$sample(
data = drowning_data,
seed = 123,
iter_warmup = iter_warmup,
iter_sampling = iter_sampling,
save_warmup = TRUE, # The warmup iterations is saved for visualization below
chains = chains,
parallel_chains = chains
)
# Run MCMC using the 'sample' method
N = length(drowning$year) # The number of years
x = drowning$year  # The years (x-axis)
y = drowning$y # The number of drownings (y-axis)
xpred = 2020
drowning_data <- list(N=N, x=x, y=y, xpred=xpred)
iter_warmup <- 2000 # Number of warm up iterations
iter_sampling <- 2000 # Number of sampling iterations
chains <- 4 # Number of MCMC
fit_mcmc <- model$sample(
data = drowning_data,
seed = 123,
iter_warmup = iter_warmup,
iter_sampling = iter_sampling,
save_warmup = TRUE, # The warmup iterations is saved for visualization below
chains = chains,
parallel_chains = chains
)
fit_mcmc$summary()
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex1_model_correct.stan")
model <- cmdstan_model(file)
model$compile(quiet = FALSE)
# Run MCMC using the 'sample' method
N = length(drowning$year) # The number of years
x = drowning$year  # The years (x-axis)
y = drowning$y # The number of drownings (y-axis)
xpred = 2020
drowning_data <- list(N=N, x=x, y=y, xpred=xpred)
iter_warmup <- 2000 # Number of warm up iterations
iter_sampling <- 2000 # Number of sampling iterations
chains <- 2 # Number of MCMC
fit_mcmc <- model$sample(
data = drowning_data,
seed = 123,
iter_warmup = iter_warmup,
iter_sampling = iter_sampling,
save_warmup = TRUE, # The warmup iterations is saved for visualization below
chains = chains,
parallel_chains = chains
)
fit_mcmc$summary()
library(aaltobda)
library(ggplot2)
library(posterior)
theme_set(theme_minimal())
library(cmdstanr)
library(posterior)
library(bayesplot)
library(aaltobda)
data("drowning")
"
data {
int<lower=0> N; // number of data points
vector[N] x; // observation year
vector[N] y; // observation number of drowned
real xpred; // prediction year
}
parameters {
real alpha;
real beta;
real<upper=0> sigma; // <- MISTAKE 1: Should have been real<lower=0> sigma
}
transformed parameters {
vector[N] mu = alpha + beta*x;
}
model {
y ~ normal(mu, sigma) // <- MISTAKE 2: No semicolon at the end
}
generated quantities {
real ypred = normal_rng(mu, sigma); // <- MISTAKE 3: should have been
// ypred = normal_rng(mu_pred, sigma), where mu_pred = alpha + beta * xpred.
// The derivation of mu_pred can be added to the transformed parameters.
}
"
"
data {
int<lower=0> N; // number of data points
vector[N] x; // observation year
vector[N] y; // observation number of drowned
real xpred; // prediction year
}
parameters {
real alpha;
real beta;
real<lower=0> sigma; // <- MISTAKE 1 fixed
}
transformed parameters {
vector[N] mu = alpha + beta*x;
real mu_pred = alpha + beta * xpred; // <- The derivation of mu_pred is added.
}
model {
y ~ normal(mu, sigma); // <- MISTAKE 2 fixed
}
generated quantities {
real ypred = normal_rng(mu_pred, sigma); // <- MISTAKE 3 fixed
}
"
find_sigma_beta <- function(sigmaSeq) {
beta_quantile_value = -69
beta_quantile = 0.005
minError = 1e9
for (sigma in sigmaSeq){
newError = abs(qnorm(p = beta_quantile, mean = 0, sd = sigma) - (beta_quantile_value))
if (newError < minError){
sigmaMin = sigma
minError = newError
}
}
sigmaMin
}
sigma <- find_sigma_beta(seq(0,100, length.out = 100000))
print("The optimal beta sigma is: ")
print(sigma)
"
data {
int<lower=0> N; // number of data points
vector[N] x; // observation year
vector[N] y; // observation number of drowned
real xpred; // prediction year
}
parameters {
real alpha;
real beta;
real<lower=0> sigma; // <- MISTAKE 1 fixed
}
transformed parameters {
vector[N] mu = alpha + beta*x;
real mu_pred = alpha + beta * xpred;
}
model {
beta ~ normal(0, 26.787); // Added this line in the block model code
y ~ normal(mu, sigma);
}
generated quantities {
real ypred = normal_rng(mu_pred, sigma);
}
"
find_sigma_alpha <- function(sigmaSeq) {
alpha_quantile_value = 138
alpha_quantile = 0.05
minError = 1e9
for (sigma in sigmaSeq){
newError = abs(qnorm(p = alpha_quantile, mean = 0, sd = sigma) - (alpha_quantile_value))
if (newError < minError){
sigmaMin = sigma
minError = newError
}
}
sigmaMin
}
sigma <- find_sigma_alpha(seq(0,100, length.out = 100000))
print("The optimal alpha sigma is: ")
print(sigma)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex1_model_correct.stan")
model <- cmdstan_model(file)
model$compile(quiet = FALSE)
# Run MCMC using the 'sample' method
N = length(drowning$year) # The number of years
x = drowning$year  # The years (x-axis)
y = drowning$y # The number of drownings (y-axis)
xpred = 2020
drowning_data <- list(N=N, x=x, y=y, xpred=xpred)
iter_warmup <- 2000 # Number of warm up iterations
iter_sampling <- 2000 # Number of sampling iterations
chains <- 2 # Number of MCMC
fit_mcmc <- model$sample(
data = drowning_data,
seed = 123,
iter_warmup = iter_warmup,
iter_sampling = iter_sampling,
save_warmup = TRUE, # The warmup iterations is saved for visualization below
chains = chains,
parallel_chains = chains
)
fit_mcmc$summary()
library(aaltobda)
data("factory")
View(factory)
library(cmdstanr)
data("factory")
sm <- cmdstan_model(stan_file = "[path to stan model code]")
library(cmdstanr)
data("factory")
#sm <- cmdstan_model(stan_file = "[path to stan model code]")
stan_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory)
)
#model <- sm$sample(data = stan_data, refresh=1000)
#model
library(cmdstanr)
data("factory")
#sm <- cmdstan_model(stan_file = "[path to stan model code]")
stan_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory)
)
#model <- sm$sample(data = stan_data, refresh=1000)
#model
View(factory)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file)
model_separate$compile(quiet = FALSE)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file)
model_separate$compile(quiet = FALSE)
print(model_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
print(model_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
print(model_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
print(model_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
print(model_separate)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_hierarchical <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_hierarchical.stan")
model_hierarchical <- cmdstan_model(file_hierarchical)
model_hierarchical$compile(quiet = FALSE)
set_cmdstan_path("C:/Users/nguye/Documents/.cmdstan/cmdstan-2.31.0")
file_hierarchical <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_hierarchical.stan")
model_hierarchical <- cmdstan_model(file_hierarchical)
model_hierarchical$compile(quiet = FALSE)
stan_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory)
)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
stan_data <- list(
y = t(factory),
N = nrow(factory),
K = ncol(factory)
)
#file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
#model_separate <- cmdstan_model(file_separate)
#model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
result_separate$summary()
result_separate$summary()
mcmc_hist(result_separate$draws("mu"))
result_separate$summary()
mcmc_hist(result_separate$draws("mu[6]"))
result_separate$summary()
hist(result_separate$draws("mu[6]"))
result_separate$summary()
hist(result_separate$draws("mu[6]"), title("Quality measurement mean of the sixth machine"))
result_separate$summary()
hist(result_separate$draws("mu[6]"), title ="Quality measurement mean of the sixth machine")
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean of the sixth machine")
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean of the sixth machine", xlab="Quality measurement mean of the sixth machine")
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean distribution of the sixth machine", xlab="Quality measurement mean")
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean distribution of the sixth machine", xlab="Quality measurement mean")
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean distribution of the sixth machine", xlab="Quality measurement mean")
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean")
result_separate$summary()
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another quality measurement of the sixth machine", xlab="predicted quality measurement")
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",bar=10)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",bar=100)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",breaks=100)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",breaks=20)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",breaks=30)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Quality measurement mean posterior distribution of the sixth machine", xlab="Quality measurement mean",breaks=20)
result_separate$summary()
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another quality measurement of the sixth machine", xlab="predicted quality measurement", breaks=20)
result_separate$summary()
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another \nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=20)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=20)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=30)
result_separate$summary()
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another\nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=30)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
result_pooled <- model_pooled$sample(data = stan_data, refresh=1000)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
result_pooled <- model_pooled$sample(data = stan_data, refresh=1000)
result_pooled$summary()
hist(result_pooled$draws("mu"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=30)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_separate <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_separate.stan")
model_separate <- cmdstan_model(file_separate)
model_separate$compile(quiet = FALSE)
result_separate <- model_separate$sample(data = stan_data, refresh=1000)
result_separate$summary()
hist(result_separate$draws("mu[6]"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=30)
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another\nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=30)
hist(result_separate$draws("mu[6]"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=30)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
result_pooled <- model_pooled$sample(data = stan_data, refresh=1000)
result_pooled$summary()
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_pooled <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_pooled.stan")
model_pooled <- cmdstan_model(file_pooled)
model_pooled$compile(quiet = FALSE)
result_pooled <- model_pooled$sample(data = stan_data, refresh=1000)
result_pooled$summary()
hist(result_pooled$draws("mu"), main="Posterior distribution of the mean of\nthe quality measurements of the sixth machine", xlab="Quality measurement mean",breaks=30)
hist(result_separate$draws("ypred[6]"), main="Predictive distribution for another\nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=30)
hist(result_pooled$draws("ypred[6]"), main="Predictive distribution for another\nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=30)
hist(result_pooled$draws("ypred"), main="Predictive distribution for another\nquality measurement of the sixth machine", xlab="predicted quality measurement", breaks=30)
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_hierarchical <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_hierarchical.stan")
model_hierarchical <- cmdstan_model(file_hierarchical)
model_hierarchical$compile(quiet = FALSE)
result_hierarchical <- model_hierarchical$sample(data = stan_data, refresh=1000)
result_hierarchical$summary()
stan_data <- list(
y = factory,
N = nrow(factory),
K = ncol(factory)
)
file_hierarchical <- file.path("C:/Users/nguye/Desktop/BDA/assignments/assignment 7", "ex2_model_hierarchical.stan")
model_hierarchical <- cmdstan_model(file_hierarchical)
model_hierarchical$compile(quiet = FALSE)
result_hierarchical <- model_hierarchical$sample(data = stan_data, refresh=1000)
result_hierarchical$summary()
