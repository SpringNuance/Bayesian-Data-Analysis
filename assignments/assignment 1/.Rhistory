reds = boxes[,0]
whites = boxes[,1]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
boxes
p_box <- function(boxes){
12
}
# To check your code/functions, just run
mark_my_assignment()
p_red <- function(boxes){
probABC = c(0.4, 0.1, 0.5)
#calculate dot product between vectors
reds = boxes[,0]
whites = boxes[,1]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
#calculate dot product between vectors
reds <- boxes[,0]
whites <- boxes[,1]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
#calculate dot product between vectors
reds <- boxes[0,]
whites <- boxes[1,]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
#calculate dot product between vectors
reds <- boxes[0,2]
whites <- boxes[1,1]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
#calculate dot product between vectors
reds <- boxes[,1]
whites <- boxes[,2]
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
result <- redRatio %*% probABC
print(result)
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
result <- redRatio %*% probABC
print(result[1,1])
return(13)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
result <- redRatio %*% probABC
return(result[1,1])
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
p_box <- function(boxes){
12
}
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# ELement-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalized/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# ELement-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
mark_my_assignment()
p_identical_twin <- function(fraternal_prob, identical_prob){
return(14)
}
mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
print(redRatio)
print(reds)
print(whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
mark_my_assignment()
p_identical_twin <- function(fraternal_prob, identical_prob){
p_mm = fraternal_prob * 1/4 + identical_prob * 1/2
p_mmGivenIden = 1/2
p_IdenGivenmm = (p_mmGivenIden * identical_prob)/p_mm
return(p_IdenGivenmm)
}
mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
boxes <- matrix(c(1,1,1,1,1,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
print(answer)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for exercise 3 is: ", prob_red)
print("The p_box for exercise 3 is: ", prob_box)
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for the example is: ", prob_red)
print("The p_box for the example is: ", prob_box)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for exercise 3 is: " + prob_red)
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for exercise 3 is: ", prob_red)
print("The p_box for exercise 3 is: ", prob_box)
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for the example is: ", prob_red)
print("The p_box for the example is: ", prob_box)
# To check your code/functions, just run
# mark_my_assignment()
p_red <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
# The dot product between the red ratio and probability of choosing the box
prob_red <- redRatio %*% probABC
return(prob_red[1,1])
}
p_box <- function(boxes){
probABC <- c(0.4, 0.1, 0.5)
reds <- boxes[,1]
whites <- boxes[,2]
redRatio <- reds/(reds + whites)
prob_red <- redRatio %*% probABC
# Element-wise product
unnormalizedBoxProb = redRatio * probABC
prob_box <- unnormalizedBoxProb/prob_red[1,1]
return(prob_box)
}
boxes <- matrix(c(2,2,1,5,5,1), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for exercise 3 is: ")
print(prob_red)
print("The p_box for exercise 3 is: ")
print(prob_box)
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2, dimnames = list(c("A", "B", "C"), c("red", "white")))
answer = p_red(boxes=boxes)
prob_red = p_red(boxes=boxes)
prob_box = p_box(boxes=boxes)
print("The p_red for the example is: ")
print(prob_red)
print("The p_box for the example is: ")
print(prob_box)
# To check your code/functions, just run
# mark_my_assignment()
p_identical_twin <- function(fraternal_prob, identical_prob){
p_mm = fraternal_prob * 1/4 + identical_prob * 1/2
p_mmGivenIden = 1/2
p_IdenGivenmm = (p_mmGivenIden * identical_prob)/p_mm
return(p_IdenGivenmm)
}
p_IdenGivenmm <- p_identical_twin(fraternal_prob = 1/150, identical_prob = 1/400)
print("The probability of exercise 5 is: ")
print(p_IdenGivenmm)
p_IdenGivenmm <- p_identical_twin(fraternal_prob = 1/125, identical_prob = 1/300)
print("The probability of example 1 is: ")
print(p_IdenGivenmm)
p_IdenGivenmm <- p_identical_twin(fraternal_prob = 1/100, identical_prob = 1/500)
print("The probability of example 2 is: ")
print(p_IdenGivenmm)
# mark_my_assignment()
library(aaltobda)
library(ggplot2)
library(rstan)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment1.yml", sep="")
set_assignment(assignment_path)
library(aaltobda)
library(ggplot2)
library(rstan)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment1.yml", sep="")
set_assignment(assignment_path)
library(aaltobda)
library(ggplot2)
library(rstan)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment1.yml", sep="")
set_assignment(assignment_path)
library(aaltobda)
library(ggplot2)
library(rstan)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment1.yml", sep="")
set_assignment(assignment_path)
library(aaltobda)
library(ggplot2)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment1.yml", sep="")
set_assignment(assignment_path)
# define the range
p = seq(0, 1, length=100)
mu = 0.2 # mean
sigma2 = 0.01 # variance
# alpha and beta calculated according to the formulas
alpha = mu * ( ((mu * (1 - mu))/sigma2) - 1)
beta = (alpha * (1 - mu))/mu
# Plotting the Beta distribution
plot(p, dbeta(p, alpha, beta), ylab='density',
type ='l', col='purple', main='Beta Distribution')
sample = rbeta(1000, alpha, beta)
hist(sample, breaks=50)
