cat("Degree of freedom:", nu,"\n")
cat("standard deviation:",s,"\n")
mu_point_est <- function(data){
nu <- length(data) - 1
n <- length(data)
mu <- mean(data)
scale <- sd(data)/sqrt(n)
x <- rtnew(10000000, nu, mu, scale)
return(mean(x))
}
mu_interval <- function(data, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
nu <- length(data) - 1
n <- length(data)
mu <- mean(data)
scale <- sd(data)/sqrt(n)
x <- rtnew(10000000, nu, mu, scale)
return(quantile(x, c(probStart, probEnd)))
}
# mu_point_est(data = windshieldy_test)
# mu_interval(data = windshieldy_test, prob = 0.95)
print("The point estimate for the hardness mean of windshield is")
mu_point_est(data = windshieldy1)
print("The 95% posterior interval for the hardness mean of windshield is")
mu_interval(data = windshieldy1, prob = 0.95)
# mark_my_assignment()
plotPosterior <- function(data){
nu <- length(data) - 1
n <- length(data)
mu <- mean(data)
scale <- sd(data)/sqrt(n)
start <- min(data) - 5
end <- max(data) + 5
x <- rtnew(10000000, nu, mu, scale)
expectedValue <- mean(x)
df1 <- data.frame(theta = seq(start, end, 0.001))
df1$p <- dtnew(df1$theta, nu, mu, scale)
df2 <- data.frame(theta = seq(qtnew(0.025, nu, mu, scale), qtnew(0.975, nu, mu, scale), length.out = 100))
# compute the posterior density
df2$p <- dtnew(df2$theta, nu, mu, scale)
ggplot(mapping = aes(theta, p)) +
geom_line(data = df1, aes(colour = "Posterior")) +
# Add a layer of colorized 95% posterior interval
geom_area(data = df2, aes(fill='1')) +
# Decorate the plot a little
# Add the expected value
geom_vline(xintercept = expectedValue, linetype='solid', colour = "red") +
labs(title='Posterior', y = 'p', x = 'mu') +
scale_y_continuous(expand = c(0, 0.1), breaks = NULL) +
scale_fill_manual(values = 'lightblue', labels = '95% posterior interval') +
scale_color_manual(name = "Type", values = c("Posterior" = "blue", "Point estimate" = "red")) +
theme(legend.position = 'bottom', legend.title = element_blank())
}
plotPosterior(windshieldy1)
mu_pred_point_est <- function(data){
nu <- length(data) - 1
n <- length(data)
mu <- mean(data)
scale <- sqrt((sd(data)^2) * (1 + (1/n)))
x <- rtnew(10000000, nu, mu, scale)
return(mean(x))
}
mu_pred_interval <- function(data, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
nu <- length(data) - 1
n <- length(data)
mu <- mean(data)
scale <- sqrt((sd(data)^2) * (1 + (1/n)))
x <- rtnew(10000000, nu, mu, scale)
return(quantile(x, c(probStart, probEnd)))
}
# mu_pred_point_est(data = windshieldy_test)
# mu_pred_interval(data = windshieldy_test, prob = 0.95)
print("The predicted point estimate for the hardness mean of windshield is")
mu_pred_point_est(data = windshieldy1)
print("The 95% predictive interval for the hardness mean of windshield is")
mu_pred_interval(data = windshieldy1, prob = 0.95)
# mark_my_assignment()
plotPredictivePosterior <- function(data){
nu <- length(windshieldy1) - 1
n <- length(windshieldy1)
mu <- mean(windshieldy1)
scale <- sqrt((sd(windshieldy1)^2) * (1 + (1/n)))
start <- min(windshieldy1) - 5
end <- max(windshieldy2) + 5
x <- rtnew(10000000, nu, mu, scale)
expectedValue <- mean(x)
df1 <- data.frame(theta = seq(start, end, 0.001))
df1$p <- dtnew(df1$theta, nu, mu, scale)
df2 <- data.frame(theta = seq(qtnew(0.025, nu, mu, scale), qtnew(0.975, nu, mu, scale), length.out = 100))
# compute the posterior density
df2$p <- dtnew(df2$theta, nu, mu, scale)
ggplot(mapping = aes(theta, p)) +
geom_line(data = df1, aes(colour = "Posterior")) +
# Add a layer of colorized 95% posterior interval
geom_area(data = df2, aes(fill='1')) +
# Decorate the plot a little
# Add the expected value
geom_vline(xintercept = expectedValue, linetype='solid', colour = "red") +
labs(title='Posterior', y = 'p', x = 'mu') +
scale_y_continuous(expand = c(0, 0.1), breaks = NULL) +
scale_fill_manual(values = 'lightblue', labels = '95% posterior interval') +
scale_color_manual(name = "Type", values = c("Posterior" = "blue", "Point estimate" = "red")) +
theme(legend.position = 'bottom', legend.title = element_blank())
}
plotPredictivePosterior(windshieldy1)
set.seed(4711)
p0_test <- rbeta(1000000, 5, 95)
p1_test <- rbeta(1000000, 10, 90)
p0 <- rbeta(1000000, 40, 636)
p1 <- rbeta(1000000, 23, 659)
posterior_odds_ratio_point_est <- function(p0, p1){
nominator = p1/(1 - p1)
denominator = p0/(1 - p0)
odd_ratio_posterior_distribution <- nominator/denominator
posterior_mean <- mean(odd_ratio_posterior_distribution)
hist(odd_ratio_posterior_distribution, breaks = 100, xlim=c(0,1.5), xlab="Odd Ratio", main="Odd Ratio Posterior Distribution")
return(posterior_mean)
}
posterior_odds_ratio_interval <- function(p0, p1, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
nominator = p1/(1 - p1)
denominator = p0/(1 - p0)
odd_ratio_posterior_distribution <- nominator/denominator
posterior_quantile <- quantile(odd_ratio_posterior_distribution, probs=c(probStart, probEnd))
return(posterior_quantile)
}
# posterior_odds_ratio_point_est(p0 = p0_test, p1 = p1_test)
# posterior_odds_ratio_interval(p0 = p0_test, p1 = p1_test, prob = 0.9)
print("The point estimate for the odd ratio is")
posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
print("The 95% posterior interval for the odd ratio is")
posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
# mark_my_assignment()
library(gridExtra)
library(grid)
prior_sensitivity_analysis <- function(prior_alpha, prior_beta, failure, success, description){
df <- data.frame(pi = seq(0, 1.0, 0.001))
posterior_alpha <- prior_alpha + failure
posterior_beta <- prior_beta + success
df$prior <- dbeta(df$pi, prior_alpha, prior_beta)
df$posterior <- dbeta(df$pi, posterior_alpha, posterior_beta)
plt<- (ggplot(df)
+geom_line(aes(x = pi, y = prior, colour="Prior"))
+geom_line(aes(x = pi, y = posterior, colour="Posterior"))
+labs(title=paste0('prior_alpha = ', prior_alpha, ', prior_beta = ', prior_beta, " \n(", description, ")"), y = 'value')
+scale_color_manual(name = "Type", values = c("Prior" = "red", "Posterior" = "blue"))
)
return(plt)
}
# For the control group
death = 39
survive = 635
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Control group", gp=gpar(fontsize=20,font=3)))
# For the treatment group
death = 22
survive = 658
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Treatment group", gp=gpar(fontsize=20,font=3)))
library(gridExtra)
library(grid)
prior_sensitivity_analysis <- function(prior_alpha, prior_beta, failure, success, description){
df <- data.frame(pi = seq(0, 1.0, 0.001))
posterior_alpha <- prior_alpha + failure
posterior_beta <- prior_beta + success
df$prior <- dbeta(df$pi, prior_alpha, prior_beta)
df$posterior <- dbeta(df$pi, posterior_alpha, posterior_beta)
plt<- (ggplot(df)
+geom_line(aes(x = pi, y = prior, colour="Prior"))
+geom_line(aes(x = pi, y = posterior, colour="Posterior"))
+labs(title=paste0('prior_alpha = ', prior_alpha, ', prior_beta = ', prior_beta, " \n(", description, ")"), y = 'value')
+scale_color_manual(name = "Type", values = c("Prior" = "red", "Posterior" = "blue"))
)
return(plt)
}
# For the control group
death = 39
survive = 635
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Control group", gp=gpar(fontsize=20,font=3)))
# For the treatment group
death = 22
survive = 658
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Treatment group", gp=gpar(fontsize=20,font=3)))
library(gridExtra)
library(grid)
prior_sensitivity_analysis <- function(prior_alpha, prior_beta, failure, success, description){
df <- data.frame(pi = seq(0, 1.0, 0.001))
posterior_alpha <- prior_alpha + failure
posterior_beta <- prior_beta + success
df$prior <- dbeta(df$pi, prior_alpha, prior_beta)
df$posterior <- dbeta(df$pi, posterior_alpha, posterior_beta)
plt<- (ggplot(df)
+geom_line(aes(x = pi, y = prior, colour="Prior"))
+geom_line(aes(x = pi, y = posterior, colour="Posterior"))
+labs(title=paste0('prior_alpha = ', prior_alpha, ', prior_beta = ', prior_beta, " \n(", description, ")"), y = 'value')
+scale_color_manual(name = "Type", values = c("Prior" = "red", "Posterior" = "blue"))
)
return(plt)
}
# For the control group
death = 39
survive = 635
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Control group", gp=gpar(fontsize=20,font=3)))
# For the treatment group
death = 22
survive = 658
p1 <- prior_sensitivity_analysis(prior_alpha = 1, prior_beta = 1, death, survive, "Noninformative prior")
p2 <- prior_sensitivity_analysis(prior_alpha = 3, prior_beta = 3, death, survive, "Weakly informative prior")
p3 <- prior_sensitivity_analysis(prior_alpha = 5, prior_beta = 100, death, survive, "Prior close to experiment likelihood")
p4 <- prior_sensitivity_analysis(prior_alpha = 50, prior_beta = 100, death, survive, "Prior not close to experiment likelihood")
grid.arrange(p1, p2, p3, p4, nrow = 2, ncol = 2, top = textGrob("Treatment group", gp=gpar(fontsize=20,font=3)))
data("windshieldy1")
n = length(windshieldy1)
y_mean = mean(windshieldy1)
df = length(windshieldy1) - 1
s = sd(windshieldy1)
print("windshieldy1 stats")
cat("Number of datapoints:", n,"\n")
cat("Data mean:", y_mean,"\n")
cat("Degree of freedom:", df,"\n")
cat("standard deviation:",s,"\n")
data("windshieldy2")
n = length(windshieldy2)
y_mean = mean(windshieldy2)
df = length(windshieldy2) - 1
s = sd(windshieldy2)
print("windshieldy2 stats")
cat("Number of datapoints:", n,"\n")
cat("Data mean:", y_mean,"\n")
cat("Degree of freedom:", df,"\n")
cat("standard deviation:",s,"\n")
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
set.seed(4711)
p0_test <- rbeta(1000000, 5, 95)
p1_test <- rbeta(1000000, 10, 90)
p0 <- rbeta(1000000, 40, 636)
p1 <- rbeta(1000000, 23, 659)
posterior_odds_ratio_point_est <- function(p0, p1){
nominator = p1/(1 - p1)
denominator = p0/(1 - p0)
odd_ratio_posterior_distribution <- nominator/denominator
posterior_mean <- mean(odd_ratio_posterior_distribution)
hist(odd_ratio_posterior_distribution, breaks = 100, xlim=c(0,1.5), xlab="Odd Ratio", main="Odd Ratio Posterior Distribution")
return(posterior_mean)
}
posterior_odds_ratio_interval <- function(p0, p1, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
nominator = p1/(1 - p1)
denominator = p0/(1 - p0)
odd_ratio_posterior_distribution <- nominator/denominator
posterior_quantile <- quantile(odd_ratio_posterior_distribution, probs=c(probStart, probEnd))
return(posterior_quantile)
}
# posterior_odds_ratio_point_est(p0 = p0_test, p1 = p1_test)
# posterior_odds_ratio_interval(p0 = p0_test, p1 = p1_test, prob = 0.9)
print("The point estimate for the odd ratio is")
posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
print("The 95% posterior interval for the odd ratio is")
posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
# mark_my_assignment()
library(aaltobda)
library(ggplot2)
theme_set(theme_minimal())
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment3.yml", sep="")
set_assignment(assignment_path)
library(aaltobda)
data("windshieldy1")
head(windshieldy1)
windshieldy_test <- c(13.357, 14.928, 14.896, 14.820)
n = length(windshieldy1)
y_mean = mean(windshieldy1)
nu = length(windshieldy1) - 1
s = sd(windshieldy1)
cat("Number of datapoints:", n,"\n")
cat("Data mean:", y_mean,"\n")
cat("Degree of freedom:", nu,"\n")
cat("standard deviation:",s,"\n")
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sqrt(sd(data1)^2/sqrt(n1 - 1))
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sqrt(sd(data2)^2/sqrt(n2- 1))
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sqrt(sd(data1)^2/(n1 - 1))
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sqrt(sd(data2)^2/(n2- 1))
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sqrt(var(data1)/(n1 - 1))
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sqrt(var(data2)/(n2- 1))
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
mu_difference_point_est <- function(data1, data2){
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
hist(mu_difference_posterior_distribution, breaks = 200, xlim=c(-4,2), xlab="Hardness mean difference", main="Hardness Mean Difference Posterior Distribution")
return(mean(mu_difference_posterior_distribution))
}
mu_difference_interval <- function(data1, data2, prob){
probStart <- (1 - prob) /2
probEnd <- 1 - (1 - prob) /2
df1 <- length(data1) - 1
n1 <- length(data1)
mu1 <- mean(data1)
scale1 <- sd(data1)/sqrt(n1)
x1 <- rtnew(10000000, df1, mu1, scale1)
df2 <- length(data2) - 1
n2 <- length(data2)
mu2 <- mean(data2)
scale2 <- sd(data2)/sqrt(n2)
x2 <- rtnew(10000000, df2, mu2, scale2)
mu_difference_posterior_distribution = x1 - x2
return(quantile(mu_difference_posterior_distribution, c(probStart, probEnd)))
}
print("The point estimate for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_point_est(data1 = windshieldy1, data2 = windshieldy2)
print("The 95% posterior interval for the hardness difference mean of windshieldy1 and windshieldy2 is")
mu_difference_interval(data1 = windshieldy1, data2 = windshieldy2, prob = 0.95)
