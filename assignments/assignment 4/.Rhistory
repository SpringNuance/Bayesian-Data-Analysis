data("bioassay_posterior")
draws <- bioassay_posterior
library(aaltobda)
library(ggplot2)
theme_set(theme_minimal())
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
set_assignment(assignment_path)
data("bioassay_posterior")
draws <- bioassay_posterior
S = length(draws$alpha)
mean_alpha <- mean(draws$alpha)
mean_beta <- mean(draws$beta)
cat("The mean for alpha is",mean_alpha,"\n")
cat("The mean for beta is",mean_beta,"\n")
cat("5% and 95% quantile for alpha is\n")
quantile(draws$alpha, c(0.05, 0.95))
cat("5% and 95% quantile for beta is\n")
print(quantile(draws$beta, c(0.05, 0.95)))
###############################################################################################
S = length(draws$alpha)
mcse_mean_alpha <- sqrt(var(draws$alpha)/S)
mcse_mean_beta <- sqrt(var(draws$beta)/S)
cat("The MCSE mean for alpha is",mcse_mean_alpha,"\n")
cat("The MCSE mean for beta is",mcse_mean_beta,"\n")
mcse_low_alpha <- mcse_quantile(draws$alpha, 0.05)[1, 1]
mcse_high_alpha <- mcse_quantile(draws$alpha, 0.95)[1, 1]
mcse_low_beta <- mcse_quantile(draws$beta, 0.05)[1, 1]
mcse_high_beta <- mcse_quantile(draws$beta, 0.95)[1, 1]
cat("5% and 95% MCSE quantile for alpha is (", mcse_low_alpha, ",", mcse_high_alpha,")\n")
cat("5% and 95% MCSE quantile for beta is (", mcse_low_beta, ",", mcse_high_beta,")\n")
data("bioassay_posterior")
draws <- bioassay_posterior
S = length(draws$alpha)
mean_alpha <- mean(draws$alpha)
mean_beta <- mean(draws$beta)
cat("The mean for alpha is",mean_alpha,"\n")
cat("The mean for beta is",mean_beta,"\n")
cat("5% and 95% quantile for alpha is\n")
quantile(draws$alpha, c(0.05, 0.95))
cat("5% and 95% quantile for beta is\n")
print(quantile(draws$beta, c(0.05, 0.95)))
###############################################################################################
S = length(draws$alpha)
mcse_mean_alpha <- sqrt(var(draws$alpha)/S)
mcse_mean_beta <- sqrt(var(draws$beta)/S)
cat("The MCSE for alpha mean is",mcse_mean_alpha,"\n")
cat("The MCSE for beta mean is",mcse_mean_beta,"\n")
mcse_low_alpha <- mcse_quantile(draws$alpha, 0.05)[1, 1]
mcse_high_alpha <- mcse_quantile(draws$alpha, 0.95)[1, 1]
mcse_low_beta <- mcse_quantile(draws$beta, 0.05)[1, 1]
mcse_high_beta <- mcse_quantile(draws$beta, 0.95)[1, 1]
cat("5% and 95% MCSE for alpha quantile is (", mcse_low_alpha, ",", mcse_high_alpha,")\n")
cat("5% and 95% MCSE for beta quantile is (", mcse_low_beta, ",", mcse_high_beta,")\n")
data("bioassay")
bioassay <- bioassay
print(bioassay)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
log_importance_weights <- function(alpha, beta){
#prior_mean_vector = matrix(c(0, 10), nrow=1, ncol=2, byrow = TRUE)
#prior_cov_matrix = matrix(c(4, 12, 12, 100), nrow=2, ncol=2, byrow = TRUE)
#nSamples <- 10
#samples <- rmvnorm(nSamples, prior_mean_vector, prior_cov_matrix)
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
round(log_importance_weights(alpha, beta),2)
## [1] -8.95 -23.47 -6.02 -8.13 -16.61 -14.57
mark_my_assignment()
data("bioassay")
bioassay <- bioassay
print(bioassay)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
log_importance_weights <- function(alpha, beta){
#prior_mean_vector = matrix(c(0, 10), nrow=1, ncol=2, byrow = TRUE)
#prior_cov_matrix = matrix(c(4, 12, 12, 100), nrow=2, ncol=2, byrow = TRUE)
#nSamples <- 10
#samples <- rmvnorm(nSamples, prior_mean_vector, prior_cov_matrix)
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
round(log_importance_weights(alpha, beta),2)
## [1] -8.95 -23.47 -6.02 -8.13 -16.61 -14.57
# mark_my_assignment()
data("bioassay")
bioassay <- bioassay
# print(bioassay)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
log_importance_weights <- function(alpha, beta){
#prior_mean_vector = matrix(c(0, 10), nrow=1, ncol=2, byrow = TRUE)
#prior_cov_matrix = matrix(c(4, 12, 12, 100), nrow=2, ncol=2, byrow = TRUE)
#nSamples <- 10
#samples <- rmvnorm(nSamples, prior_mean_vector, prior_cov_matrix)
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
round(log_importance_weights(alpha, beta),2)
## [1] -8.95 -23.47 -6.02 -8.13 -16.61 -14.57
# mark_my_assignment()
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
normalized_importance_weights <- function(alpha, beta){
unnormalized <- bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
exponentiated <- exp(unnormalized)
ratio <- 1/sum(exponentiated)
normalized <- exponentiated * ratio
return(normalized)
}
round(normalized_importance_weights(alpha = alpha, beta = beta),3)
prior_mean_vector = matrix(c(0, 10), nrow=1, ncol=2, byrow = TRUE)
prior_cov_matrix = matrix(c(4, 12, 12, 100), nrow=2, ncol=2, byrow = TRUE)
nSamples <- 4000
generatedSamples <- rmvnorm(nSamples, prior_mean_vector, prior_cov_matrix)
generatedSamples <- data.matrix(generatedSamples)
alphaSamples <- generatedSamples[, 1]
betaSamples <- generatedSamples[, 2]
normalized_importance_ratios = normalized_importance_weights(alphaSamples, betaSamples)
hist(normalized_importance_ratios, breaks = 50)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
# mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
data("bioassay")
bioassay <- bioassay
# print(bioassay)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
log_importance_weights <- function(alpha, beta){
return(bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n))
}
round(log_importance_weights(alpha, beta),2)
# mark_my_assignment()
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
normalized_importance_weights <- function(alpha, beta){
unnormalized <- bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
exponentiated <- exp(unnormalized)
ratio <- 1/sum(exponentiated)
normalized <- exponentiated * ratio
return(normalized)
}
round(normalized_importance_weights(alpha = alpha, beta = beta),3)
prior_mean_vector = matrix(c(0, 10), nrow=1, ncol=2, byrow = TRUE)
prior_cov_matrix = matrix(c(4, 12, 12, 100), nrow=2, ncol=2, byrow = TRUE)
nSamples <- 4000
generatedSamples <- rmvnorm(nSamples, prior_mean_vector, prior_cov_matrix)
generatedSamples <- data.matrix(generatedSamples)
alphaSamples <- generatedSamples[, 1]
betaSamples <- generatedSamples[, 2]
normalized_importance_ratios = normalized_importance_weights(alphaSamples, betaSamples)
hist(normalized_importance_ratios, breaks = 50)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
# round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
S_eff <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
squared_normalized_weights <- normalized_weights^2
effective_sample_size <- 1/sum(squared_normalized_weights)
return(effective_sample_size)
}
round(S_eff(alpha = alpha, beta = beta),3)
# mark_my_assignment()
round(S_eff(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = (alpha * normalized_weights)^2
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = (beta * normalized_weights)^2
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
# mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
posterior_mean <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
return(c(posterior_alpha_mean, posterior_beta_mean))
}
# round(posterior_mean(alpha = alpha, beta = beta),3)
## [1] 0.503 8.275.
round(posterior_mean(alpha = alphaSamples, beta = betaSamples),3)
# mark_my_assignment()
posterior_mean_MCSE <- function(alpha, beta){
normalized_weights = normalized_importance_weights(alpha, beta)
mean_weights = mean(normalized_weights)
posterior_alpha_dist = alpha * normalized_weights
posterior_alpha_mean = mean(posterior_alpha_dist)/mean_weights
posterior_beta_dist = beta * normalized_weights
posterior_beta_mean = mean(posterior_beta_dist)/mean_weights
posterior_alpha_squared_dist = alpha^2 * normalized_weights
posterior_alpha_squared_mean = mean(posterior_alpha_squared_dist)/mean_weights
posterior_beta_squared_dist = beta^2 * normalized_weights
posterior_beta_squared_mean = mean(posterior_beta_squared_dist)/mean_weights
var_alpha = posterior_alpha_squared_mean - posterior_alpha_mean ^ 2
var_beta = posterior_beta_squared_mean - posterior_beta_mean ^ 2
sample_effective_size = S_eff(alpha, beta)
mean_MCSE_alpha = sqrt(var_alpha/sample_effective_size)
mean_MCSE_beta = sqrt(var_beta/sample_effective_size)
return(c(mean_MCSE_alpha, mean_MCSE_beta))
}
round(posterior_mean_MCSE(alpha = alphaSamples, beta = betaSamples),3)
